bool类型：
	C++中有单独的bool类型，其中的true代表1，逻辑真。false代表0，逻辑假。
本质上，bool类型是使用一个char型的数据进行存储的整数。允许相应的隐式类型转换。
	任何表达式和数据，可以赋值给bool类型(隐式转换)，进行逻辑判断。

=========================================================
重载：
	* 重载概念的前提：
		1. 在同一个作用域中；
		2. 函数名相同；
		3. 参数列表不同；(包括参数个数/参数类型/参数顺序3者之一)
	* 不同作用域中，同名函数遵循表示符隐藏原则。(作用范围小的其总用。)

重载解析：
	完全匹配 > 常量转换(如const) > 升级转换(数据类型范围) > 标准转换(可能导致信息损失)
	> 自定义转换 > 省略号匹配
	常量转换，不进行类型转换，比较是安全的。
	升级转换，至少没有丢失一些字节空间。
	标准转换，可能会丢失一些字节信息，截断。（考虑float转换成int型，float底数和指数部分，一共4个字节。所以它的精度壁整数低一些。)
	省略转换，是不全定类型和不全定个数。完全不确定，壁标准转换还要不全定。
	
	
	using namespace std;
	void foo(char*p, int c)
	{
		cout << "foo(1)" << endl;
	}
	int foo(const char*p, char c)
	{
		cout << "foo(2)" << endl;
	}
	int main(void)
	{
		char*p;
		charc;
		foo(p,c);	//使用哪个函数重载？？
	}

	void bar(char c){ cout << "bar01" << endl;}
	void bar(int c){cout << "bar02" << endl;}
	void bar(long long c){cout << "bar03" << endl;}

	void hum(double i, ...)
	{
		cout << "hum01" << endl;
	}
	void hum(int i, void* p)
	{
		cout << "hum02" << endl;
	}
	double i;
	void *pt;
	hum(i, pt);	//使用哪个函数重载？？

函数指针的重载：
	函数指针，由于需要显示指出形参类型。所以函数指针的重载是根据形参类型确定的。
	void (*p_func)(char*p, int i) = foo;	//
	char*pt;
	int i;
	p_func((const char*)pt, (int) i);	//提示报错，从(const char*)转换成(char*)类型无效。

如果gcc和g++混合编译：
	如，用gcc编译的main.c和另外的一个源代码文件使用的是g++编译的，那么很可能g++这个编译器将函数
	的名字进行了修改。
	可以使用nm对目标文件进行查看，实际的函数名称。
	C++的编译器会修改函数名，尤其是重载的情况；
	C的标准编译器是不会修改函数名字的；
	
extern “c”
	可以使用 extern "c"要求C++的编译器，不使用换名。而直接使用类似标准C编译器的方法，不进行换名。
	当然，也就不能进行重载了。


