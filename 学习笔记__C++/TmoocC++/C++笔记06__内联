内联
	- 内联就是用函数已经编译好的二进制代码，“替换”对该函数的调用指令
	- 内联在保证函数特性的同时，避免了函数“调用开销”
	- 注意内联于“有参宏”(宏函数)的区别

 __________
| func-call|
| ===()=== ---- > 2进制代码块    
| func-call|
| ===()=== ---- > 2进制代码块
|	   |
|__________|

	- 内联会使可执行文件的“体积”和进程代码的内存变大，因此只有“频繁”调用的“简单”函数
	  才适合做内联。
	- 若函数在类声明中“直接定义”，则自动被优化为内联，否则可在其声明处加上inlin关键字
	- inline 关键字仅表示“期望”该函数被优化为内联，但是否内联则完全由编译器进行决定。
	- “很少”被调用的复杂函数和“递归”函数都不适合内联。
（因为递归的停止条件是在运行时才执行的，而内联是需要编译成二进制代码，然后进行替换的。）

内存泄漏，是需要进行评估的(什么都不是绝对的！)。针对持续增长的内存泄漏(占用)，是需要要特别
关注的，如果程序运行工程中就占用了几次有限的内存，泄漏了几次。而且内存够用，那么程序可以运行。


